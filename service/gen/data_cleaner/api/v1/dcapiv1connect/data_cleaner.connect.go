// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: data_cleaner/api/v1/data_cleaner.proto

package dcapiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/jamesread/data-cleaner/gen/data_cleaner/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DataCleanerServiceName is the fully-qualified name of the DataCleanerService service.
	DataCleanerServiceName = "data_cleaner.api.v1.DataCleanerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DataCleanerServiceImportProcedure is the fully-qualified name of the DataCleanerService's Import
	// RPC.
	DataCleanerServiceImportProcedure = "/data_cleaner.api.v1.DataCleanerService/Import"
	// DataCleanerServiceExportProcedure is the fully-qualified name of the DataCleanerService's Export
	// RPC.
	DataCleanerServiceExportProcedure = "/data_cleaner.api.v1.DataCleanerService/Export"
	// DataCleanerServiceReloadProcedure is the fully-qualified name of the DataCleanerService's Reload
	// RPC.
	DataCleanerServiceReloadProcedure = "/data_cleaner.api.v1.DataCleanerService/Reload"
	// DataCleanerServiceLoadProcedure is the fully-qualified name of the DataCleanerService's Load RPC.
	DataCleanerServiceLoadProcedure = "/data_cleaner.api.v1.DataCleanerService/Load"
)

// DataCleanerServiceClient is a client for the data_cleaner.api.v1.DataCleanerService service.
type DataCleanerServiceClient interface {
	Import(context.Context, *connect.Request[v1.ImportRequest]) (*connect.Response[v1.ImportResponse], error)
	Export(context.Context, *connect.Request[v1.ExportRequest]) (*connect.Response[v1.ExportResponse], error)
	Reload(context.Context, *connect.Request[v1.ReloadRequest]) (*connect.Response[v1.ReloadResponse], error)
	Load(context.Context, *connect.Request[v1.LoadRequest]) (*connect.Response[v1.LoadResponse], error)
}

// NewDataCleanerServiceClient constructs a client for the data_cleaner.api.v1.DataCleanerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDataCleanerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DataCleanerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dataCleanerServiceMethods := v1.File_data_cleaner_api_v1_data_cleaner_proto.Services().ByName("DataCleanerService").Methods()
	return &dataCleanerServiceClient{
		_import: connect.NewClient[v1.ImportRequest, v1.ImportResponse](
			httpClient,
			baseURL+DataCleanerServiceImportProcedure,
			connect.WithSchema(dataCleanerServiceMethods.ByName("Import")),
			connect.WithClientOptions(opts...),
		),
		export: connect.NewClient[v1.ExportRequest, v1.ExportResponse](
			httpClient,
			baseURL+DataCleanerServiceExportProcedure,
			connect.WithSchema(dataCleanerServiceMethods.ByName("Export")),
			connect.WithClientOptions(opts...),
		),
		reload: connect.NewClient[v1.ReloadRequest, v1.ReloadResponse](
			httpClient,
			baseURL+DataCleanerServiceReloadProcedure,
			connect.WithSchema(dataCleanerServiceMethods.ByName("Reload")),
			connect.WithClientOptions(opts...),
		),
		load: connect.NewClient[v1.LoadRequest, v1.LoadResponse](
			httpClient,
			baseURL+DataCleanerServiceLoadProcedure,
			connect.WithSchema(dataCleanerServiceMethods.ByName("Load")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dataCleanerServiceClient implements DataCleanerServiceClient.
type dataCleanerServiceClient struct {
	_import *connect.Client[v1.ImportRequest, v1.ImportResponse]
	export  *connect.Client[v1.ExportRequest, v1.ExportResponse]
	reload  *connect.Client[v1.ReloadRequest, v1.ReloadResponse]
	load    *connect.Client[v1.LoadRequest, v1.LoadResponse]
}

// Import calls data_cleaner.api.v1.DataCleanerService.Import.
func (c *dataCleanerServiceClient) Import(ctx context.Context, req *connect.Request[v1.ImportRequest]) (*connect.Response[v1.ImportResponse], error) {
	return c._import.CallUnary(ctx, req)
}

// Export calls data_cleaner.api.v1.DataCleanerService.Export.
func (c *dataCleanerServiceClient) Export(ctx context.Context, req *connect.Request[v1.ExportRequest]) (*connect.Response[v1.ExportResponse], error) {
	return c.export.CallUnary(ctx, req)
}

// Reload calls data_cleaner.api.v1.DataCleanerService.Reload.
func (c *dataCleanerServiceClient) Reload(ctx context.Context, req *connect.Request[v1.ReloadRequest]) (*connect.Response[v1.ReloadResponse], error) {
	return c.reload.CallUnary(ctx, req)
}

// Load calls data_cleaner.api.v1.DataCleanerService.Load.
func (c *dataCleanerServiceClient) Load(ctx context.Context, req *connect.Request[v1.LoadRequest]) (*connect.Response[v1.LoadResponse], error) {
	return c.load.CallUnary(ctx, req)
}

// DataCleanerServiceHandler is an implementation of the data_cleaner.api.v1.DataCleanerService
// service.
type DataCleanerServiceHandler interface {
	Import(context.Context, *connect.Request[v1.ImportRequest]) (*connect.Response[v1.ImportResponse], error)
	Export(context.Context, *connect.Request[v1.ExportRequest]) (*connect.Response[v1.ExportResponse], error)
	Reload(context.Context, *connect.Request[v1.ReloadRequest]) (*connect.Response[v1.ReloadResponse], error)
	Load(context.Context, *connect.Request[v1.LoadRequest]) (*connect.Response[v1.LoadResponse], error)
}

// NewDataCleanerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDataCleanerServiceHandler(svc DataCleanerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dataCleanerServiceMethods := v1.File_data_cleaner_api_v1_data_cleaner_proto.Services().ByName("DataCleanerService").Methods()
	dataCleanerServiceImportHandler := connect.NewUnaryHandler(
		DataCleanerServiceImportProcedure,
		svc.Import,
		connect.WithSchema(dataCleanerServiceMethods.ByName("Import")),
		connect.WithHandlerOptions(opts...),
	)
	dataCleanerServiceExportHandler := connect.NewUnaryHandler(
		DataCleanerServiceExportProcedure,
		svc.Export,
		connect.WithSchema(dataCleanerServiceMethods.ByName("Export")),
		connect.WithHandlerOptions(opts...),
	)
	dataCleanerServiceReloadHandler := connect.NewUnaryHandler(
		DataCleanerServiceReloadProcedure,
		svc.Reload,
		connect.WithSchema(dataCleanerServiceMethods.ByName("Reload")),
		connect.WithHandlerOptions(opts...),
	)
	dataCleanerServiceLoadHandler := connect.NewUnaryHandler(
		DataCleanerServiceLoadProcedure,
		svc.Load,
		connect.WithSchema(dataCleanerServiceMethods.ByName("Load")),
		connect.WithHandlerOptions(opts...),
	)
	return "/data_cleaner.api.v1.DataCleanerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DataCleanerServiceImportProcedure:
			dataCleanerServiceImportHandler.ServeHTTP(w, r)
		case DataCleanerServiceExportProcedure:
			dataCleanerServiceExportHandler.ServeHTTP(w, r)
		case DataCleanerServiceReloadProcedure:
			dataCleanerServiceReloadHandler.ServeHTTP(w, r)
		case DataCleanerServiceLoadProcedure:
			dataCleanerServiceLoadHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDataCleanerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDataCleanerServiceHandler struct{}

func (UnimplementedDataCleanerServiceHandler) Import(context.Context, *connect.Request[v1.ImportRequest]) (*connect.Response[v1.ImportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("data_cleaner.api.v1.DataCleanerService.Import is not implemented"))
}

func (UnimplementedDataCleanerServiceHandler) Export(context.Context, *connect.Request[v1.ExportRequest]) (*connect.Response[v1.ExportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("data_cleaner.api.v1.DataCleanerService.Export is not implemented"))
}

func (UnimplementedDataCleanerServiceHandler) Reload(context.Context, *connect.Request[v1.ReloadRequest]) (*connect.Response[v1.ReloadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("data_cleaner.api.v1.DataCleanerService.Reload is not implemented"))
}

func (UnimplementedDataCleanerServiceHandler) Load(context.Context, *connect.Request[v1.LoadRequest]) (*connect.Response[v1.LoadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("data_cleaner.api.v1.DataCleanerService.Load is not implemented"))
}
