// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: data_cleaner.proto

package grpc

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataCleanerServiceClient is the client API for DataCleanerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataCleanerServiceClient interface {
	Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error)
	Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	Reload(ctx context.Context, in *ReloadRequest, opts ...grpc.CallOption) (*ReloadResponse, error)
}

type dataCleanerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataCleanerServiceClient(cc grpc.ClientConnInterface) DataCleanerServiceClient {
	return &dataCleanerServiceClient{cc}
}

func (c *dataCleanerServiceClient) Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error) {
	out := new(ImportResponse)
	err := c.cc.Invoke(ctx, "/DataCleanerService/Import", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCleanerServiceClient) Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/DataCleanerService/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCleanerServiceClient) Reload(ctx context.Context, in *ReloadRequest, opts ...grpc.CallOption) (*ReloadResponse, error) {
	out := new(ReloadResponse)
	err := c.cc.Invoke(ctx, "/DataCleanerService/Reload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataCleanerServiceServer is the server API for DataCleanerService service.
// All implementations should embed UnimplementedDataCleanerServiceServer
// for forward compatibility
type DataCleanerServiceServer interface {
	Import(context.Context, *ImportRequest) (*ImportResponse, error)
	Export(context.Context, *ExportRequest) (*httpbody.HttpBody, error)
	Reload(context.Context, *ReloadRequest) (*ReloadResponse, error)
}

// UnimplementedDataCleanerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDataCleanerServiceServer struct {
}

func (UnimplementedDataCleanerServiceServer) Import(context.Context, *ImportRequest) (*ImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (UnimplementedDataCleanerServiceServer) Export(context.Context, *ExportRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (UnimplementedDataCleanerServiceServer) Reload(context.Context, *ReloadRequest) (*ReloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}

// UnsafeDataCleanerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataCleanerServiceServer will
// result in compilation errors.
type UnsafeDataCleanerServiceServer interface {
	mustEmbedUnimplementedDataCleanerServiceServer()
}

func RegisterDataCleanerServiceServer(s grpc.ServiceRegistrar, srv DataCleanerServiceServer) {
	s.RegisterService(&DataCleanerService_ServiceDesc, srv)
}

func _DataCleanerService_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCleanerServiceServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataCleanerService/Import",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCleanerServiceServer).Import(ctx, req.(*ImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCleanerService_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCleanerServiceServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataCleanerService/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCleanerServiceServer).Export(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCleanerService_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCleanerServiceServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataCleanerService/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCleanerServiceServer).Reload(ctx, req.(*ReloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataCleanerService_ServiceDesc is the grpc.ServiceDesc for DataCleanerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataCleanerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DataCleanerService",
	HandlerType: (*DataCleanerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Import",
			Handler:    _DataCleanerService_Import_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _DataCleanerService_Export_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _DataCleanerService_Reload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data_cleaner.proto",
}
